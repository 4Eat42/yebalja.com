// This model was generated by Lumber. However, you remain in control of your models.
// Learn how here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models
module.exports = (sequelize, DataTypes) => {
  const { Sequelize } = sequelize;
  // This section contains the fields of your model, mapped to your table's columns.
  // Learn more here: https://docs.forestadmin.com/documentation/v/v6/reference-guide/models/enrich-your-models#declaring-a-new-field-in-a-model
  const Programs = sequelize.define('programs', {
    title: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    navTitle: {
      type: DataTypes.STRING,
    },
    personnel: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    benefit: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    badgeCoding: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    badgeAptitude: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    badgeInterview: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    badgeTryout: {
      type: DataTypes.INTEGER,
      allowNull: false,
    },
    heading: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    subheading: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    link: {
      type: DataTypes.STRING,
    },
    eduPeriod: {
      type: DataTypes.STRING,
    },
    manage: {
      type: DataTypes.STRING,
    },
  }, {
    tableName: 'programs',
    underscored: true,
    timestamps: false,
  });

  // This section contains the relationships for this model. See: https://docs.forestadmin.com/documentation/v/v6/reference-guide/relationships#adding-relationships.
  Programs.associate = (models) => {
    Programs.hasMany(models.categories, {
      foreignKey: {
        name: 'programsIdKey',
        field: 'programs_id',
      },
      as: 'programsCategories',
    });
    Programs.hasMany(models.gisus, {
      foreignKey: {
        name: 'programsIdKey',
        field: 'programs_id',
      },
      as: 'programsGisuses',
    });
    Programs.hasMany(models.reviews, {
      foreignKey: {
        name: 'programsIdKey',
        field: 'programs_id',
      },
      as: 'programsReviews',
    });
  };

  return Programs;
};
